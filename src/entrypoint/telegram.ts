import { AiEntryPointInterface } from './interface';
import { Context, Telegraf } from 'telegraf';
import { ChatProcessor } from '../ai/chat-processor';
import { message } from 'telegraf/filters';

export class TelegramEntryPoint implements AiEntryPointInterface {
  constructor(
    private readonly processor: ChatProcessor,
  ) {
  }

  async run() {
    const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    if (!TELEGRAM_TOKEN) {
      console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env');
      process.exit(1);
    }
    const bot = new Telegraf(TELEGRAM_TOKEN);
    bot.start(this.helpReply);
    bot.help(this.helpReply);
    bot.command('reset', async (ctx) => {
      await this.processor.resetSession(ctx.chat.id.toString());
      await ctx.reply('üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
    });
    bot.on(message('text'), async (ctx) => {
      const sessionId = ctx.chat.id.toString();
      const query = ctx.message.text;
      const start = Date.now();
      const thinkResult = await ctx.reply('ü§ñ –î—É–º–∞—é...'); // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü–æ—Ç–æ–º –µ–≥–æ —É–¥–∞–ª–∏–º
      try {
        const response = await this.processor.processMessage(sessionId, query);
        const end = Date.now();
        const durationSec = ((end - start) / 1000).toFixed(2);

        await ctx.reply(`ü§ñ –û—Ç–≤–µ—Ç (${durationSec} —Å–µ–∫):\n${response.message}`);
        await ctx.telegram.deleteMessage(ctx.chat.id, thinkResult.message_id);

        if (response.tools.length > 0) {
          const toolText = response.tools
            .map((tool, i) => `  ${i + 1}. ${tool.name} ${JSON.stringify(tool.arguments)}`)
            .join('\n');
          // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
          await ctx.reply(`üõ†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n${toolText}`);
        }
      } catch (err) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', err);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
      }
    });
    await bot.telegram.setMyCommands([
      {
        command: '/reset',
        description: '–°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é'
      }
    ]);
    await bot.launch(() => {
      console.log('üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    });
  }


  private helpReply(ctx: Context) {
    return ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏.');
  }
}
