import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { EmailService } from '../services/EmailService';
import { UserService } from '../services/UserService';

const emailService = new EmailService();
const userService = new UserService();
const server = new McpServer({
  name: "demo-server",
  version: "1.0.0"
});

server.registerTool("send_message",
  {
    title: "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
    description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –ü–æ–ª–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ",
    inputSchema: {
      text: z.string(),
    },
  },
  async (req) => {
    await emailService.saveEmail(req.text);
    return {content: [{type: "text", text: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`}],};
  }
);

server.registerTool(
  'create_user',
  {
    title: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–º—è –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö –Ω–µ –ø–µ—Ä–µ–¥–∞–ª, —Ç–æ –∏—Ö –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ. –°–∞–º–æ–º—É –ò–ò –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–µ–ª—å–∑—è',
    inputSchema: {
      name: z.string(),
      birthYear: z.number(),
    },
  },
  async (req) => {
    await userService.addUser({
      name: req.name,
      birthYear: req.birthYear
    });

    return {
      content: [
        {
          type: 'text',
          text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`,
        },
      ],
    };
  }
);

// üìå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: users-list
server.registerTool(
  'users_list',
  {
    title: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏',
    outputSchema: {
      elements: z.array(
        z.object({
          id: z.number(),
          birthYear: z.string(),
        })
      ),
    },
  },
  async () => {
    let elements = await userService.getUsers();
    return {
      structuredContent: {
        elements: elements,
      },
      content: [
        {
          type: 'text',
          text: elements.map((u) => `${u.name} (${u.birthYear})`).join(', ') || '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        },
      ],
    };
  }
);

server.registerTool(
  'user_count',
  {
    title: '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ï—Å–ª–∏ —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è,' +
      ' —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —ç—Ç–æ —á–∏—Å–ª–æ —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.' +
      '–ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, —Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å 0',
    inputSchema: {
      age: z.number().optional().default(0),
    },
  },
  async (req) => {
    const users = await userService.countUsersOlderThan(req.age);
    return {
      content: [{type: 'text', text: String(users)}],
    };
  }
);

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ stdio, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë –∏ –æ—Ç–¥–∞–µ–º –æ—Ç–≤–µ—Ç
const transport = new StdioServerTransport();
server.connect(transport);